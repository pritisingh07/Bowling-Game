package com.bowling.game;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import com.bowling.game.exception.GameNotInitializedException;
import com.bowling.game.exception.InvalidRoundException;
import com.bowling.game.exception.InvalidTossException;
import com.bowling.game.model.Game;

/**
 * 
 * 
 * @author I320266
 * Main class to take input and display score.
 * Input can be taken in 2 ways:
 * 1. Simulated - where score is generated by program itself
 * 2. Manual - where score is given by the user
 * After each round, Score Board will be displayed
 *
 */
public class Main {
	

	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("----------BOWLING--------");
		System.out.println("Press 1 to start a new simulated game");
		System.out.println("Press 2 to start a new manual game");
		System.out.println("Press 0 to quit");
		int in = input.nextInt();
		Game game = new Game();
		switch (in) {
		case 1:
			takeSimulationInput(game);
			break;
		
		case 2:
			takeManualInput(game);
			break;

		case 0:
			break;
			
		default:
			System.exit(0);
		}
	}
	
	
	private static void takeSimulationInput(Game game) {
		// for each round, generate pins knocked down for tosses
		int i;
		for(i = 0; i<10; i++) {
			Scanner input = new Scanner(System.in);
			System.out.println();
			System.out.println("Enter 1 to play round " + (i+1));
			System.out.println("Press 0 to quit");
			int inputRound =0;
			if(input.hasNextInt())
				inputRound = input.nextInt();
			if(inputRound == 1) {
				List<Integer> tossScores = new ArrayList<>();
				int maxPins = 10;
				for(int j=0; j<2; j++) {
					if(maxPins != 0) {
						int pins = generateRandomNumber(maxPins);
						tossScores.add(pins);
						maxPins = maxPins - pins;
					}
				}
				//for last round, check if strike or spare occurred to generate pins knocked down for extra toss
				if(i == 9) {
					if(tossScores.size() == 1) {
						System.out.println("Strike!");
						int pins = generateRandomNumber(10);
						tossScores.add(pins);
						if(pins == 10)
							tossScores.add(generateRandomNumber(10));
						else
							tossScores.add(generateRandomNumber(10 - pins));
					}
					else if((tossScores.size() == 2) && (tossScores.get(0) + tossScores.get(1) == 10)) {
						System.out.println("Spare!");
						tossScores.add(generateRandomNumber(10));
					}
				}
				try {
					GameMechanics.playNewRound(game, tossScores, i);
				} catch (GameNotInitializedException e) {
					e.getMessage();
				} catch (InvalidRoundException e) {
					e.getMessage();
				} catch (InvalidTossException e) {
					e.getMessage();
				}
			}
			else if(inputRound == 0) {
				System.exit(0);
			}else{
				System.out.println("Invalid input-Exiting program");
				System.exit(0);
			}
				
		}
	}
	
	private static void takeManualInput(Game game) {
		//for each round, get input for pins knocked in each toss by user
		for(int i=0; i<10; i++) {
			Scanner input = new Scanner(System.in);
			System.out.println();
			System.out.println("Round " + (i+1));
			System.out.println("Enter pins knocked down in two tosses");
			List<Integer> tossScores = new ArrayList<>();
			if(input.hasNext())
				tossScores.add(input.nextInt());
			if(tossScores.get(0)!= 10)
				tossScores.add(input.nextInt());
			if(inputIsValid(tossScores)) {
				//if last round is strike or spare, ask user to enter input for 3rd toss
				if(i == 9 && (tossScores.get(0) == 10 || (tossScores.get(0) + tossScores.get(1)) == 10)) {
					if(tossScores.get(0) == 10) {
						System.out.println("Enter pins knocked down in 2nd toss");
						tossScores.add(input.nextInt());
					}
					System.out.println("Enter pins knocked down for 3rd toss");
					tossScores.add(input.nextInt());
				}
				try {
					GameMechanics.playNewRound(game, tossScores, i);
				} catch (GameNotInitializedException e) {
					e.getMessage();
				} catch (InvalidRoundException e) {
					e.getMessage();
				} catch (InvalidTossException e) {
					e.getMessage();
				}
			}
			else {
				System.out.println("Wrong input! Total pins for a round cannot exceed 10. Play this round again.");
				i--;
			}
		}
	}

	private static boolean inputIsValid(List<Integer> tossScores) {
		int sum = 0;
		for (Integer score : tossScores) {
			sum = sum + score;
		}
		if(sum > 10)
			return false;
		return true;
	}


	private static int generateRandomNumber(int maxPins) {
		Random random = new Random();
		return random.nextInt(maxPins + 1);
	}
	

}

